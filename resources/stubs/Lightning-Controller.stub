<?php
/**
 * @copyright (c) 2019
 */

namespace {{Namespace}};

use {{FullModelClass}};
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use App\Http\Requests\{{NamespaceSingle}}Create{{ModelClass}}Request;
use App\Http\Requests\{{NamespaceSingle}}Update{{ModelClass}}Request;
use App\Http\Controllers\Controller;
use Simianbv\Search\SearchResult;
use Simianbv\Search\ApiCollection;
use Simianbv\Search\ApiSingleResource;
use Simianbv\JsonSchema\Contracts\IsLockable;
use Exception;
{{Uses}}

/**
 * @autogenerated Controller
 * @class   {{Class}}
 * @package {{Namespace}}
 */
class {{Class}} extends Controller
{
    /**
     * Display a listing of the {{ModelClass}}.
     * @browse
     * @return ApiCollection
     */
    public function index()
    {
        return new ApiCollection(SearchResult::apply({{ModelClass}}::class));
    }

    /**
     * Display the specified {{ModelClass}}.
     * @read
     * @param  {{ModelClass}}  ${{ModelVariable}}
     * @return ApiSingleResource
     * @throws Exception
     */
    public function show({{ModelClass}} ${{ModelVariable}})
    {
        return new ApiSingleResource(${{ModelVariable}});
    }

    /**
     * Store a newly created {{ModelClass}} in storage.
     * @add
     * @param  Create{{ModelClass}}Request  $request
     * @return Response
     */
    public function store(Create{{ModelClass}}Request $request)
    {
        ${{ModelVariable}} = new {{ModelClass}};
        ${{ModelVariable}}->fill($request->input());

        if(${{ModelVariable}}->save()){
            return $this->created("{{ModelLabel}} is aangemaakt.", ['resource' => ${{ModelVariable}}]);
        }

        return $this->error("Helaas, {{ModelLabel}} kon niet aangemaakt worden.");
    }

    /**
     * Update the specified {{ModelClass}} in storage.
     *
     * @edit
     * @param  Update{{ModelClass}}Request  $request
     * @param  {{ModelClass}}               ${{ModelVariable}}
     * @return Response
     */
    public function update(Update{{ModelClass}}Request $request, {{ModelClass}} ${{ModelVariable}})
    {
        ${{ModelVariable}}->fill($request->input());

        if (${{ModelVariable}}->isDirty()) {
            if(${{ModelVariable}}->save()) {
                return $this->updated("{{ModelLabel}} is ge&euml;pdatet.", ['resource' => ${{ModelVariable}}]);
            } else {
                return $this->error("{{ModelLabel}} kon niet worden ge&euml;pdatet.");
            }
        }
        else {
            return $this->info("Geen wijzigingen gevonden, {{ModelLabel}} is niet ge&euml;pdatet.", ['resource' => ${{ModelVariable}}]);
        }
    }

    /**
     * Remove the specified {{ModelClass}} from storage.
     *
     * @autogenerated
     * @delete
     * @param  {{ModelClass}} ${{ModelVariable}}
     * @return Response
     * @throws Exception
     */
    public function destroy({{ModelClass}} ${{ModelVariable}})
    {
        if(${{ModelVariable}} instanceof IsLockable){
            if(${{ModelVariable}}->isLocked()){
                return $this->error("{{ModelLabel}} is gesloten (staat op slot) en mag daarom niet verwijderd worden.");
            }
        }

        if(${{ModelVariable}}->delete()) {
            return $this->success('{{ModelLabel}} is verwijderd.');
        } else {
            return $this->error("{{ModelLabel}} kon niet worden verwijderd.");
        }
    }

    {{RelatedFields}}
}
