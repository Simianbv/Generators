<?php
/**
 * Copyright (c) 2019.
 */

namespace Simianbv\Generators\Console\Generators;

use Exception;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

/**
 * Class AclGenerator
 * @package Simianbv\Generators\Console\Generators
 */
class AclGenerator extends ClassGenerator
{
    /**
     * @param array     $resource
     * @param string    $group
     * @param string    $model
     * @param string    $category
     * @param bool      $skipAclPresenceCheck
     *
     * @return bool
     */
    public function create($resource, $group, $model, $category = '', $skipAclPresenceCheck = false)
    {

        DB::beginTransaction();

        $aclOptions = [
            'access' => 'bladeren',
            'create' => 'toevoegen',
            'read' => 'lezen',
            'update' => 'bewerken',
            'delete' => 'verwijderen',
        ];

        try {

            if (isset($resource['acl']) || $skipAclPresenceCheck) {

                $groupToken = str_replace(['-'], [''], strtolower(Str::slug($group) . '.' . Str::slug(Str::snake($model))));
                $groupToken = $this->trim($groupToken, '.');

                $groupName = __(ucfirst(str_replace('_', ' ', Str::snake($model))));
                $category = $category == '' || $category == null ? __(ucfirst($group)) : $category;

                if (!($group = Group::where('token', '=', $groupToken)->first())) {
                    $this->parent->info("Attempting to make ACL group $groupToken");
                    $group = Group::create([
                        'category' => $category,
                        'name' => $groupName,
                        'token' => $groupToken,
                        'controller' => "App\\Http\\Controllers\\Api\\" . $this->ns($group) . $model . 'Controller',
                        'is_locked' => false,
                        'allow_permission_creation' => true,
                    ]);
                }

                if (!$group) {
                    $this->error("Unable to create the ACL group for category $category with name: " . $groupToken);
                    return false;
                }

                $skip = [];
                if (is_array($resource['acl'])) {
                    foreach ($resource['acl'] as $key => $val) {
                        if (in_array($key, array_keys($aclOptions)) && $val === false) {
                            $skip[] = $key;
                        }
                    }
                }

                foreach ($aclOptions as $item => $label) {
                    $permissionToken = $groupToken . '.' . $item;

                    if (!($permission = Permission::where('token', '=', $permissionToken)->first()) && !in_array($item, $skip)) {
                        $permission = Permission::create([
                            'group_id' => $group->getKey(),
                            'name' => $item,
                            'label' => $groupName . ' ' . $label,
                            'category' => $category,
                            'token' => $permissionToken,
                            'is_autogenerated' => true,
                            'is_locked' => false,
                        ]);

                        $group->permissions()->attach($permission->getKey());
                    }
                }
            }

            DB::commit();

        } catch (Exception $e) {
            $this->parent->error($e->getMessage());
            DB::rollBack();
        }

        return true;
    }
}
